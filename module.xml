<?xml version="1.0" ?>
<!--@POSTPROC: ./postproc.sh-->
<module suppressWarnings="false">

<User f="nodata">
  <User f="noscroll">
    <Select_User t="list" f="user nocertainty noannotation" l="Start"/>
  </User>
</User>

<Start f="nodata">
  <Main>
    <Band_Number t="dropdown">
      <!--Needs to be populated manually in logic-->
    </Band_Number>
    <Bird_Species t="dropdown">
      <!--Needs to be populated manually in logic-->
    </Bird_Species>
    <Location_Name t="dropdown">
      <!--Needs to be populated manually in logic-->
    </Location_Name>
    <Create_Bird t="button" l="Bird"/>
    <Take_Next_Birds_Measurements t="button">
      Take Next Bird's Measurements
    </Take_Next_Birds_Measurements>
  </Main>
  <search>
    <!-- TODO: Re-implement with code copied from PAZC or Boncuklu. Should be
         able to filter using Bird_Species and Location_Name.-->
  </search>
  <Map>
    <Map t="map"/>
  </Map>
</Start>

<Bird>
  <Bird_Info>
    <Band_Number t="dropdown" f="id notnull nocertainty">
      <desc>Copy in the alphanumeric code from the band attached to the bird</desc>
      <str>
        <fmt>$1$2</fmt>
      </str>
      <opts>
        <opt>026</opt>
        <opt>027</opt>
        <opt>036</opt>
      </opts>
    </Band_Number>
    <Band_Number_Measure t="input" b="decimal" f="nodata">
      <!--We'll link this to the data schema as a measure in the-->
      <!--post-processing step.-->
    </Band_Number_Measure>
    <Bird_Species>
      <opts>
        <opt>zebra finch</opt>
        <opt>long-tailed finch</opt>
        <opt>house sparrow</opt>
        <opt>other</opt>
      </opts>
    </Bird_Species>
    <Location_Name>
      <opts>
        <opt>Gap Hills</opt>
        <opt>Saloon</opt>
        <opt>Sandstone</opt>
        <opt>White tank</opt>
        <opt>Old Aviary</opt>
        <opt>New Aviary</opt>
        <opt>W19G</opt>
        <opt>W19F</opt>
      </opts>
    </Location_Name>
    <gps/>
    <Nest_ID f="nocertainty"/>
    <Chick_ID f="nocertainty"/>
    <Age t="radio" f="notnull">
      <opts>
        <opt>Pulli</opt>
        <opt>Juvenile</opt>
        <opt>Adult</opt>
      </opts>
    </Age>
    <Sex t="radio" f="notnull nocertainty">
      <opts>
        <opt>Male</opt>
        <opt>Female</opt>
        <opt>Unknown</opt>
      </opts>
    </Sex>
    <How_Caught t="radio">
      <opts>
        <opt>Trap</opt>
        <opt>Mist net</opt>
        <opt>Nest</opt>
        <opt>Aviary</opt>
        <opt>Other</opt>
      </opts>
    </How_Caught>
    <Capture_Status t="checkbox" f="nocertainty">
      <opts>
        <opt>
          Recaptured
        </opt>
      </opts>
    </Capture_Status>
    <Bill_Colour t="picture">
      <opts>
        <opt>
          zebra finch
          <opt>yellow</opt>
          <opt>yellow orange</opt>
          <opt>orange</opt>
          <opt>orange red</opt>
          <opt>red</opt>
        </opt>
        <opt>
          long-tailed finch
          <opt>yellow</opt>
          <opt>yellow orange</opt>
          <opt>orange</opt>
          <opt>orange red</opt>
          <opt>red</opt>
        </opt>
        <opt>
          house sparrow
          <opt>yellow (with flange)</opt>
          <opt>yellow</opt>
          <opt>grey</opt>
          <opt>black</opt>
        </opt>
        <opt>
          other
        </opt>
      </opts>
    </Bill_Colour>
    <timestamp/>
    <author/>
  </Bird_Info>
  <Measurements f="noscroll">
    <Add_Measurements     t="button" lc="Measurements"/>
    <List_of_Measurements t="list" ec="Measurements"/>
  </Measurements>
  <Comments>
    <ID_Pit_Tag  f="notnull nocertainty" b="decimal"/>
    <Colour_Band f="notnull nocertainty" t="picture">
      <opts>
        <opt>Red</opt>
        <opt>Green</opt>
        <opt>Black</opt>
        <opt>Dark Blue</opt>
        <opt>Light Blue</opt>
        <opt>Orange</opt>
        <opt>Yellow</opt>
        <opt>Purple</opt>
        <opt>White</opt>
        <opt>Brown</opt>
        <opt>Other</opt>
      </opts>
    </Colour_Band>
    <Comments            f="   notnull nocertainty"/>
    <Sample t="checkbox" f="id notnull nocertainty">
      <str>
        <app>; </app>
      </str>
      <opts>
        <opt>Blood</opt>
        <opt>Feather</opt>
        <opt>Sperm</opt>
      </opts>
    </Sample>
    <Attach_Photograph t="camera">
      <desc>Take two pictures, one of head front, one of head side</desc>
    </Attach_Photograph>
  </Comments>
</Bird>

<Measurements>
  <Measurements>
    <Timestamp           f="id readonly"/>
    <Band_Number         f="id readonly">
      <opts>
        <opt>026</opt>
        <opt>027</opt>
        <opt>036</opt>
      </opts>
    </Band_Number>
    <Band_Number_Measure f="nodata readonly">
      <!--We'll link this to the data schema as a measure in the-->
      <!--post-processing step.-->
    </Band_Number_Measure>
    <Tarsus_Length f="notnull" b="decimal"><desc>mm</desc></Tarsus_Length>
    <Head_Length   f="notnull" b="decimal"><desc>mm</desc></Head_Length>
    <cols>
      <Bill_Length f="notnull" b="decimal"><desc>mm</desc></Bill_Length>
      <Bill_Height f="notnull" b="decimal"><desc>mm</desc></Bill_Height>
    </cols>
    <Wing_Length   f="notnull" b="decimal"><desc>mm</desc></Wing_Length>
    <Tail_Length   f="notnull" b="decimal"><desc>mm</desc></Tail_Length>
    <Mass          f="notnull" b="decimal"><desc>grams</desc></Mass>
  </Measurements>
</Measurements>

<logic><![CDATA[
  startInternalGPS();

/********************* /Start/Main/* DROPDOWN POPULATION **********************/
  makeVocab("DropDown", "Start/Main/Band_Number",   "Band Number");
  makeVocab("DropDown", "Start/Main/Bird_Species",  "Bird Species");
  makeVocab("DropDown", "Start/Main/Location_Name", "Location Name");

/****************************** LOCATION COPYING ******************************/
  addOnEvent("Start", "show", "loadLocationName()");
  addOnEvent("Bird",  "show", "copyLocationName()");

  loadLocationName() {
    src = "Start/Main/Location_Name";
    setFieldValueFromLocalSettings(src, src);
  }

  copyLocationName() {
    src = "Start/Main/Location_Name";
    dst = "Bird/Bird_Info/Location_Name";
    val = getFieldValue(src);

    insertIntoLocalSettings(src, val);
    setFieldValue(dst, val);
  }
/**************************** BIRD SPECIES COPYING ****************************/
  addOnEvent("Start", "show", "loadBirdSpecies()");
  addOnEvent("Bird",  "show", "copyBirdSpecies()");

  loadBirdSpecies() {
    src = "Start/Main/Bird_Species";
    setFieldValueFromLocalSettings(src, src);
  }

  copyBirdSpecies() {
    src = "Start/Main/Bird_Species";
    dst = "Bird/Bird_Info/Bird_Species";
    val = getFieldValue(src);

    insertIntoLocalSettings(src, val);
    setFieldValue(dst, val);
  }
/**************************** BAND NUMBER COPYING *****************************/
  addOnEvent("Start", "show", "loadBandNumber()");
  addOnEvent("Bird",  "show", "copyBandNumber()");

  loadBandNumber() {
    src = "Start/Main/Band_Number";
    setFieldValueFromLocalSettings(src, src);
  }

  copyBandNumber() {
    src = "Start/Main/Band_Number";
    dst = "Bird/Bird_Info/Band_Number";
    val = getFieldValue(src);

    setFieldValue(dst, val);
  }

/************** DATE AND BAND NUMBER POPULATION FOR MEASUREMENTS **************/
/* Implemented using @POSTPROC.                                               */
/******************************************************************************/
  setMeasurementsTimestamp() {
    ref     = "Measurements/Measurements/Timestamp";
    fmt     = "dd MMM HH:mm:ss z";
    date    = new Date();
    dateFmt = new java.text.SimpleDateFormat(fmt);
    dateStr = dateFmt.format(date);
    setFieldValue(ref, dateStr);
  }

  setMeasurementsBandNumber() {
    uuid = getUuid("Bird");
    q = getDuplicateAttributeQuery(uuid, "'Band Number'");
    fetchAll(q, new FetchCallback() {
      onFetch(result) {
        if (result == null) {
          return;
        }
        vocabid = result.get(0).get(2);
        val     = vocabid;
        dst     = "Measurements/Measurements/Band_Number";
        setFieldValue(dst, val);
      }
    });
  }

  setMeasurementsBandNumberMeasure() {
    uuid = getUuid("Bird");
    q = getDuplicateAttributeQuery(uuid, "'Band Number'");
    fetchAll(q, new FetchCallback() {
      onFetch(result) {
        if (result == null) {
          return;
        }
        vocabid = result.get(0).get(3);
        val     = vocabid;
        dst     = "Measurements/Measurements/Band_Number_Measure";
        setFieldValue(dst, val);
      }
    });
  }

/*************************** CHRONOLOGICAL SAMPLING ***************************/
  addOnEvent(
      "Start/Main/Take_Next_Birds_Measurements",
      "click",
      "takeNextMeasurementsBird()"
  );

  // TODO: Ensure that autoSaving works for consecutively taken Measurements
  // Effectively, disables the "take next bird's measurement" button in the nav
  // bar when the user navigates away from the Measurements tab group. So this
  // event should occur when a tab group other than Measurements is displayed.
  doAllowSamplingInNav = false;
  addOnEvent("User",  "show", "doAllowSamplingInNav = false");
  addOnEvent("Start", "show", "doAllowSamplingInNav = false");
  addOnEvent("Bird",  "show", "doAllowSamplingInNav = false");

  takeNextMeasurementsBird() {
    doAllowSamplingInNav = true;

    // TODO: Get a query which gets the uuid of the next bird record lacking a
    //       measurement in the current >time period, >2016. ISHYGDDT XDD.
    q  = "SELECT uuid ";
    q += "  FROM latestnondeletedarchent ";
    q += "  JOIN aenttype USING (Aenttypeid) ";
    q += " WHERE aenttypename = 'Bird' ";
    q += "   AND uuid NOT IN ( ";
    q += "SELECT uuid ";
    q += "  FROM latestnondeletedaentreln ";
    q += "  JOIN latestnondeletedrelationship USING (relationshipid) ";
    q += "  JOIN relntype USING (relntypeid) ";
    q += " WHERE relntypename = 'Bird - Measurements' ";
    q += "   AND aentrelntimestamp > datetime('now', '-10 seconds')); ";

    uuid = "??? PROFIT!";
    fetchAll(q, new FetchCallback() {
      onFetch(result) {
        if        (result == null    ) {
          return;
        } else if (result.size() == 0) {
          showToast("No measurements to take");
        } else {
          uuid = result.get(0).get(0);
          parentTabgroup = "Bird";
          setUuid(parentTabgroup, uuid);
          newMeasurements();
        }
      }
    });
  }

/***************************** (SOME) VALIDATION ******************************/
/* Effectively, validate when Bird/Bird_Info tab is left.                     */
/* Protip: validateBird() is a function made by the autogenerator.  It will   */
/* validate everything in the Bird record.                                    */
/******************************************************************************/
  addOnEvent("Bird/Measurements", "show", "validateBird()");
  addOnEvent("Bird/Comments",     "show", "validateBird()");

/*************************** (SOME MORE) VALIDATION ***************************/
/* ID Pit Tag: On blur, show a warning if there are more than 15 characters   */
/* entered.                                                                   */
/******************************************************************************/
  onFocusCallback = null;
  onBlurCallback  = "validateIdPitTag()";
  onFocus("Bird/Comments/ID_Pit_Tag", onFocusCallback, onBlurCallback);

  validateIdPitTag() {
    ref       = "Bird/Comments/ID_Pit_Tag";
    charLimit = 15;
    doWarn    = getFieldValue(ref).length() > charLimit;

    warning  = "The value of {ID_Pit_Tag} is over " + charLimit;
    warning += " characters long. Please enter a shorter value.";

    if (doWarn) {
      showWarning("Warning", warning);
    }
  }

/*************************** (EVEN MORE) VALIDATION ***************************/
/* Band Number: On blur, show a warning if there are not 5 characters         */
/* entered.                                                                   */
/******************************************************************************/
  onFocusCallback = null;
  onBlurCallback  = "validateBandNumber()";
  onFocus("Bird/Bird_Info/Band_Number", onFocusCallback, onBlurCallback);

  validateBandNumber() {
    ref       = "Bird/Bird_Info/Band_Number";
    charLimit = 5;
    doWarn    = getFieldValue(ref).length() == charLimit;

    warning = "The value of {Band_Number} is not equal to " + charLimit + ". ";

    if (doWarn) {
      showWarning("Warning", warning);
    }
  }

/******************************* RANGE CHECKING *******************************/
  import java.math.BigDecimal;

  Map    RANGES        = new HashMap();
  String DROPDOWN_REF  = "Bird/Bird_Info/Bird_Species";
  List   DROPDOWN_VALS = new ArrayList(); //[String: vocabid, String: vocabname]

  setRange(String k1, String k2, String min, String max) {
    // Convert k2 from human-readable vocabname to vocabid
    k2 = "{" + k2 + "}";
    for (List val : DROPDOWN_VALS) {
      String vocabId   = val.get(0);
      String vocabName = val.get(1);

      if (k2.equals(vocabName)) {
        k2 = vocabId;
        break;
      }
    }

    key = makeKey(k1, k2);
    val = makeVal(min, max);
    RANGES.put(key, val);

    // onFocus() binding to do validation on blur
    onFocusCallback = null;
    onBlurCallback  = "validateOnBlur(\"" + k1 + "\")";
    onFocus(k1, onFocusCallback, onBlurCallback);
  }
  getRange(k1, k2) {
    key = makeKey(k1, k2);
    return getRange(key);
  }
  getRange(key) {
    return RANGES.get(key);
  }
  makeKey(String k1, String k2) {
    List l = new ArrayList();
    l.add(k1);
    l.add(k2);
    return l;
  }
  makeVal(String min, String max) {
    List l = new ArrayList();
    l.add(0, min);
    l.add(1, max);
    return l;
  }
  getMin(List range) {
    return new BigDecimal(range.get(0));
  }
  getMax(List range) {
    return new BigDecimal(range.get(1));
  }
  isNullBirdSpecies() {
    return isNull(getFieldValue(DROPDOWN_REF));
  }
  isInRange(String fieldRef) {
    if (isNullBirdSpecies())
      return true;
    if (isNull(getFieldValue(fieldRef)))
      return true;

    k1 = fieldRef;
    k2 = getFieldValue(DROPDOWN_REF);

    range = getRange(k1, k2); /* oh, btw */ if (range == null) return true;
    min = getMin(range);
    max = getMax(range);

    val = getFieldValue(fieldRef);
    val = new BigDecimal(val);

    if (val.compareTo(min) == -1) return false;
    if (val.compareTo(max) == +1) return false;
    return true;
  }
  validateOnBlur(String fieldRef) {
    if (isInRange(fieldRef)) {
      return;
    }

    // Find the permitted values for the failing field
    k1 = fieldRef;
    k2 = getFieldValue(DROPDOWN_REF);
    range = getRange(k1, k2);

    // Get the human-readable name for the failing field
    String arch16n = "";
    arch16n = fieldRef.split("/")[2];
    arch16n = "{" + arch16n + "}";

    // Build a nice error message for the user
    String msg = "";
    msg += "Value out of range for the field '" + arch16n + "'. ";
    msg += "Permitted values are in the interval " + range.toString() + ".";

    // Inform user that dey dun goof'd
    showWarning("Validation Failed", msg);
  }

  setRanges() {
    species = new ArrayList();
    species.add("zebra_finch");
    species.add("long-tailed_finch");
    species.add("house_sparrow");

    for (s : species) {
      setRange("Measurements/Measurements/Tarsus_Length", s,   "6.0",  "25.0");
      setRange("Measurements/Measurements/Head_Length",   s,  "15.0",  "40.0");
      setRange("Measurements/Measurements/Bill_Length",   s,   "6.0",  "16.0");
      setRange("Measurements/Measurements/Bill_Height",   s,   "6.0",  "10.0");
      setRange("Measurements/Measurements/Wing_Length",   s,  "20.0",  "90.0");
      setRange("Measurements/Measurements/Tail_Length",   s,  "20.0", "130.0");
      setRange("Measurements/Measurements/Mass",          s,   "6.0",  "35.0");
    }
  }

  fetchVocab("Bird Species", DROPDOWN_VALS, "setRanges()");
]]></logic>
</module>
