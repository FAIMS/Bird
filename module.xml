<?xml version="1.0" ?>
<module suppressWarnings="false">

<User f="nodata">
  <User f="noscroll">
    <Select_User t="list" f="user nocertainty noannotation" l="Start"/>
  </User>
</User>

<Start f="nodata">
  <Main f="noscroll">
    <Bird_Species t="dropdown">
      <!--Needs to be populated manually-->
    </Bird_Species>
    <Location_Name t="dropdown">
      <!--Needs to be populated manually-->
    </Location_Name>
    <Create_Bird t="button" l="Bird"/>
  </Main>
  <search/>
  <Map>
    <map t="map"/>
  </Map>
</Start>

<Bird>
  <Bird_Info>
    <Band_Number f="id notnull">
      <desc>Copy in the alphanumeric code from the band attached to the bird</desc>
    </Band_Number>
    <Bird_Species>
      <opts>
        <opt>zebra finch</opt>
        <opt>long-tailed finch</opt>
        <opt>house sparrow</opt>
        <opt>other</opt>
      </opts>
    </Bird_Species>
    <timestamp/>
    <author/>
    <Location_Name>
      <opts>
        <opt>1</opt>
        <opt>2</opt>
        <opt>3</opt>
        <opt>4</opt>
      </opts>
    </Location_Name>
    <gps/>
    <Nest_ID/>
    <Chick_ID/>
    <Age t="radio">
      <opts>
        <opt>Pulli</opt>
        <opt>Juvenile</opt>
        <opt>Adult</opt>
      </opts>
    </Age>
    <Sex t="radio">
      <opts>
        <opt>Male</opt>
        <opt>Female</opt>
        <opt>Unknown</opt>
      </opts>
    </Sex>
    <How_Caught t="radio">
      <opts>
        <opt>Trap</opt>
        <opt>Mist net</opt>
        <opt>Nest</opt>
      </opts>
    </How_Caught>
    <Bill_Colour t="picture">
      <opts>
        <opt>
          zebra finch
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
          <opt>4</opt>
        </opt>
        <opt>
          long-tailed finch
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
          <opt>4</opt>
        </opt>
        <opt>
          house sparrow
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
          <opt>4</opt>
        </opt>
        <opt>
          other
          <opt>1</opt>
          <opt>2</opt>
          <opt>3</opt>
          <opt>4</opt>
        </opt>
      </opts>
    </Bill_Colour>
  </Bird_Info>
  <Measurements>
    <Tarsus_Length b="decimal"><desc>mm</desc></Tarsus_Length>
    <Head_Length   b="decimal"><desc>mm</desc></Head_Length>
    <cols>
      <Bill_Length b="decimal"><desc>mm</desc></Bill_Length>
      <Bill_Height b="decimal"><desc>mm</desc></Bill_Height>
    </cols>
    <Wing_Length   b="decimal"><desc>mm</desc></Wing_Length>
    <Tail_Length   b="decimal"><desc>mm</desc></Tail_Length>
    <Mass          b="decimal"><desc>grams</desc></Mass>
  </Measurements>
  <Comments>
    <ID_Pit_Tag/>
    <Comments/>
    <Attach_Photograph t="camera">
      <desc>Take two pictures, one of head front, one of head side</desc>
    </Attach_Photograph>
  </Comments>
</Bird>

<logic><![CDATA[
/******************************* RANGE CHECKING *******************************/
  Map    RANGES          = new HashMap();
  String DROPDOWN_REF    = "Bird/Bird_Info/Bird_Species";
  List   DROPDOWN_VALS   = new ArrayList(); //[String: vocabid, String: vocabname]
  List   FIELDS_TO_CHECK = new ArrayList();

  FIELDS_TO_CHECK.add("Bird/Measurements/Tarsus_Length");
  FIELDS_TO_CHECK.add("Bird/Measurements/Head_Length");
  FIELDS_TO_CHECK.add("Bird/Measurements/Bill_Length");
  FIELDS_TO_CHECK.add("Bird/Measurements/Bill_Height");
  FIELDS_TO_CHECK.add("Bird/Measurements/Wing_Length");
  FIELDS_TO_CHECK.add("Bird/Measurements/Tail_Length");
  FIELDS_TO_CHECK.add("Bird/Measurements/Mass");

  for (String f : FIELDS_TO_CHECK) {
    onFocusCallback = null;
    onBlurCallback  = "validateOnBlur(\"" + f + "\")";

    onFocus(f, onFocusCallback, onBlurCallback);
  }

  setRange(String k1, String k2, Float min, Float max) {
    // Convert k2 from human-readable vocabname to vocabid
    k2 = "{" + k2 + "}";
    for (List val : DROPDOWN_VALS) {
      String vocabId   = val.get(0);
      String vocabName = val.get(1);

      if (k2.equals(vocabName)) {
        k2 = vocabId;
        break;
      }
    }

    key = makeKey(k1, k2);
    val = makeVal(min, max);
    RANGES.put(key, val);
  }
  getRange(k1, k2) {
    key = makeKey(k1, k2);
    return getRange(key);
  }
  getRange(key) {
    val = RANGES.get(key);
    if (val == null) {
      Log.e("getRange", "Range not defined");
      return makeVal(0, 0);
    } else {
      return val;
    }
  }
  makeKey(String k1, String k2) {
    List l = new ArrayList();
    l.add(k1);
    l.add(k2);
    return l;
  }
  makeVal(Float min, Float max) {
    List l = new ArrayList();
    l.add(0, min);
    l.add(1, max);
    return l;
  }
  getMin(List range) {
    return range.get(0);
  }
  getMax(List range) {
    return range.get(1);
  }
  isNullBirdSpecies() {
    return isNull(getFieldValue(DROPDOWN_REF));
  }
  isInRange(String fieldRef) {
    if (isNullBirdSpecies())
      return true;
    if (isNull(getFieldValue(fieldRef)))
      return true;

    k1 = fieldRef;
    k2 = getFieldValue(DROPDOWN_REF);

    range = getRange(k1, k2);
    min = getMin(range);
    max = getMax(range);

    val = getFieldValue(fieldRef);
    val = Float.parseFloat(val);
    if (val > max) return false; // TODO: Make this robust for floating point numbers
    if (val < min) return false;
    return true;
  }
  validateOnBlur(String fieldRef) {
    if (isInRange(fieldRef)) {
      return;
    }

    // Find the permitted values for the failing field
    k1 = fieldRef;
    k2 = getFieldValue(DROPDOWN_REF);
    range = getRange(k1, k2);

    // Get the human-readable name for the failing field
    String arch16n = "";
    arch16n = fieldRef.split("/")[2];
    arch16n = "{" + arch16n + "}";

    // Build a nice error message for the user
    String msg = "";
    msg += "Value out of range for the field '" + arch16n + "'. ";
    msg += "Permitted values are in the interval " + range.toString() + ".";

    // Inform user that dey dun goof'd
    showWarning("Validation Failed", msg);
  }

  setRanges() {
    species = new ArrayList();
    species.add("zebra_finch");
    species.add("long-tailed_finch");
    species.add("house_sparrow");

    for (s : species) {
      setRange("Bird/Measurements/Tarsus_Length", s,   6.0,  25.0);
      setRange("Bird/Measurements/Head_Length",   s,  15.0,  40.0);
      setRange("Bird/Measurements/Bill_Length",   s,   6.0,  16.0);
      setRange("Bird/Measurements/Bill_Height",   s,   6.0,  10.0);
      setRange("Bird/Measurements/Wing_Length",   s,  20.0,  90.0);
      setRange("Bird/Measurements/Tail_Length",   s,  20.0, 130.0);
      setRange("Bird/Measurements/Mass",          s,   6.0,  35.0);
    }
  }

  fetchVocab("Bird Species", DROPDOWN_VALS, "setRanges()");

/************ /Start/Main/{Bird_Species,Location_Name} POPULATION *************/
  makeVocab("DropDown", "Start/Main/Bird_Species",  "Bird Species");
  makeVocab("DropDown", "Start/Main/Location_Name", "Location Name");

/****************************** LOCATION COPYING ******************************/
  addOnEvent("Start", "show", "loadLocationName()");
  addOnEvent("Bird",  "show", "copyLocationName()");

  loadLocationName() {
    src = "Start/Main/Location_Name";
    setFieldValueFromLocalSettings(src, src);
  }

  copyLocationName() {
    src = "Start/Main/Location_Name";
    dst = "Bird/Bird_Info/Location_Name";
    val = getFieldValue(src);

    insertIntoLocalSettings(src, val);
    setFieldValue(dst, val);
  }
/**************************** BIRD SPECIES COPYING ****************************/
  addOnEvent("Start", "show", "loadBirdSpecies()");
  addOnEvent("Bird",  "show", "copyBirdSpecies()");

  loadBirdSpecies() {
    src = "Start/Main/Bird_Species";
    setFieldValueFromLocalSettings(src, src);
  }

  copyBirdSpecies() {
    src  = "Start/Main/Bird_Species";
    dst = "Bird/Bird_Info/Bird_Species";
    val  = getFieldValue(src);

    insertIntoLocalSettings(src, val);
    setFieldValue(dst, val);
  }
]]></logic>
</module>
